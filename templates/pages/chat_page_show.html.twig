{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block chat %}

{% set username = user.username %}
{% set firstName = user.firstName %}
{% set lastName = user.lastName %}

{% set url1 = asset('/images/user_icon.png') %}
{% set url2 = asset('/images/gear_icon.png') %}
{% set url3 = asset('/images/feed_icon.png')  %}
{% set url4 = asset('/images/team_icon.png') %}
{% set url5 = asset('/images/close_icon.png') %}

{% set path1 = "/profile" %}
{% set path2 = "/settings" %}
{% set path3 = "/feed"  %}
{% set path4 = "/people" %}
{% set path5 = "/logout" %}


<div class="page--chat">
    <div class="section__profile">
         {% include 'elements/profile_tab.html.twig' with {'username': username,
                        'lastName' : lastName, 'id' : user.id, 'firstName' : firstName} %} 
        <div class="profile__actions">
            {% include "elements/sidebar_left.html.twig"  with {'url1': url1,
            'url2':url2, 'url3':url3, 'url4':url4, 'text1':'Profile', 'text2':'Settings',
            'text3':'Feed', 'text4':'Find people', 'text5':'Logout', 'path1':path1, 'path2':path2, 'path3':path3, 
            'path4':path4, 'path5':path5} %}
        </div>
    </div>
    <div class="section__chat">
       {% if conversations|length > 0 %}
        <div class="chat__sidebar">
            <div class="chat__tab">
            {% for otherUser in otherUsers %}
                {% include 'elements/chat_profile_tab.html.twig' with {'username': otherUser.username, 'lastName' : otherUser.lastName, 'id' : otherUser.id, 'firstName' : otherUser.firstName, 'conversation' : otherUser.getSharedConversation(user)} %}
            {% endfor %}
            </div>
        </div>
        <div class="chat__window">
            <div class="window__messages">
                {% for message in currentConversation.getMessages() %}
                    {% if message.getUserId()[0].id == user.id %}
                        <div class="message--current" user_id="{{message.getUserId()[0].id}}">
                            <span>{{message.getContent()}}</span>
                        </div>
                    {% else %}
                        <div class="message--other" user_id="{{message.getUserId()[0].id}}">
                            <span>{{message.getContent()}}</span>
                        </div>
                    {% endif %}
                {% endfor %}
            </div>
            <div class="window__input">{{ form(sendForm, {'id': 'send_message_form'}) }}</div>
        </div>
        {% else %}
            <h1 class="initialized--none">No conversations initialized</h1>
        {% endif %}
    </div>
</div>

<script>
/*document.addEventListener("DOMContentLoaded", function() {
    const messageForm = document.querySelector(".window__input form");
    const messageContainer = document.querySelector(".window__messages");
    const conversationId = {{ currentConversation.getId() }};
    
    messageForm.addEventListener("submit", function(event) {
        event.preventDefault();
        const formData = new FormData(messageForm);
        fetch(messageForm.action, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetch(`{{ url('app_chat_fetch_message', {'id': currentConversation.id}) }}`)
                    .then(response => response.json())
                    .then(data => {
                        const messages = data.messages;
                        const length = data.messages.length;;
                        const messageElement = document.createElement("div");
                        messageElement.classList.add("message--current");
                        messageElement.textContent = messages[length-1].content;
                        messageContainer.appendChild(messageElement);
                    })
                    .catch(error => {
                        console.error("Error fetching messages:", error);
                    });
            }
        })
        .catch(error => {
            console.error("Error sending message:", error);
        });
    });
})*/

document.addEventListener("DOMContentLoaded", function() {
    const conversationId = {{ currentConversation.getId() }};
    const messageForm = document.querySelector(".window__input form");
    const messageContainer = document.querySelector(".window__messages");
messageForm.addEventListener("submit", function(event) {
    event.preventDefault(); // Prevent the default form submission behavior
    console.log("Form submitted"); // Add a log statement for debugging
    const formData = new FormData(messageForm);
    fetch(messageForm.action, {
        method: "POST",
        body: formData
    })
    .then(response => {
        console.log("Fetch response received");
    })
    .catch(error => {
        console.error("Fetch error:", error);
    });
});
    
    function fetchAndDisplayMessages() {
        fetch(`{{ url('app_chat_fetch_message', {'id': currentConversation.id}) }}`)
            .then(response => response.json())
            .then(data => {
                const messages = data.messages;
                const length = data.messages.length;
                var currentUserMessageNumber = document.querySelectorAll(".message--current").length;
                var otherUserMessageNumber = document.querySelectorAll(".message--other").length;
                var startingPoint = currentUserMessageNumber + otherUserMessageNumber;
                var mesCont = messages[0];

                console.log(messages.length+"All messages length   |   Starting point "+startingPoint);
                if(startingPoint != messages.length){
                    for(let i = startingPoint; i<messages.length; i++){
                        let messageElement = document.createElement("div");
                        let messageContent = document.createElement("span");
                        messageElement.setAttribute("user_id", messages[i].user_id);
                        messageContent.textContent = messages[i].content;
                        messageElement.appendChild(messageContent);
                        if(messageElement.getAttribute("user_id")=={{user.id()}}) messageElement.classList.add("message--current");
                        else messageElement.classList.add("message--other");
                        messageContainer.appendChild(messageElement);
                     }
                }
            })
            .catch(error => {
                console.error("Error fetching messages:", error);
            });
    }
    
    fetchAndDisplayMessages(); // Fetch and display messages immediately
    
    // Fetch and display new messages every 5 seconds (adjust interval as needed)
    const messageFetchInterval = setInterval(fetchAndDisplayMessages, 5000);
    
    // Stop fetching messages when the user navigates away from the page
    window.addEventListener("beforeunload", function() {
        clearInterval(messageFetchInterval);
    });
});
</script>

{% endblock %}

